/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Interface.TelaJogo;

import java.awt.Color;
import java.awt.Graphics;
import Logica.Robo; // Importe sua classe Robo

// ---- 1. ATRIBUTOS PARA GUARDAR O ESTADO DO JOGO ----
// Precisamos de referências para o robô e o alimento
public class TabuleiroPanel extends javax.swing.JPanel {
    // ---- 1. ATRIBUTOS PARA GUARDAR O ESTADO DO JOGO ----
// Precisamos de referências para o robô e o alimento

    private Robo roboParaDesenhar;
    private int xAlimento;
    private int yAlimento;

// Defina o tamanho da sua área e de cada "célula" do grid
    private final int GRID_TAMANHO = 4; // Seu trabalho especifica 4 unidades de lado
    private final int CELULA_TAMANHO_PIXELS = 125; // Tamanho de cada quadrado (em pixels)
    private final int PAINEL_TAMANHO_PIXELS = GRID_TAMANHO * CELULA_TAMANHO_PIXELS;

// ---- 2. MÉTODO PARA ATUALIZAR O ESTADO ----
// Sua janela (JFrame) vai usar este método para "entregar" o robô 
// e o alimento para o painel poder desenhar.
    public void atualizarEstado(Robo robo, int xAlimento, int yAlimento) {
        this.roboParaDesenhar = robo;
        this.xAlimento = xAlimento;
        this.yAlimento = yAlimento;
    }

// ---- 3. O MÉTODO paintComponent ----
// Este é o método principal de desenho.
    @Override
    protected void paintComponent(Graphics g) {
        // 1. super.paintComponent(g);
        // Esta é a primeira coisa a se fazer. Limpa o painel antes de desenhar.
        super.paintComponent(g);

        // 2. Desenhar o Alimento (Ex: um quadrado verde)
        g.setColor(Color.GREEN);
        g.fillRect(
                xAlimento * CELULA_TAMANHO_PIXELS, // Posição X
                yAlimento * CELULA_TAMANHO_PIXELS, // Posição Y
                CELULA_TAMANHO_PIXELS, // Largura
                CELULA_TAMANHO_PIXELS // Altura
        );

        // 3. Desenhar o Robô (Ex: um círculo azul)
        // Só desenha se o robô já foi inicializado
        if (roboParaDesenhar != null) {
            g.setColor(Color.BLUE); // Você pode mudar isso para usar a "cor" do seu robô
            g.fillOval(
                    roboParaDesenhar.getPosicaoX() * CELULA_TAMANHO_PIXELS, // Posição X
                    roboParaDesenhar.getPosicaoY() * CELULA_TAMANHO_PIXELS, // Posição Y
                    CELULA_TAMANHO_PIXELS, // Largura
                    CELULA_TAMANHO_PIXELS // Altura
            );
        }
        
        // 4. Desenhar a Grade 4x4
        g.setColor(Color.BLACK); // Cor da grade
        for (int i = 0; i <= GRID_TAMANHO; i++) {
            // Linhas verticais
            g.drawLine(
                    i * CELULA_TAMANHO_PIXELS, // x1
                    0, // y1
                    i * CELULA_TAMANHO_PIXELS, // x2
                    PAINEL_TAMANHO_PIXELS // y2
            );

            // Linhas horizontais
            g.drawLine(
                    0, // x1
                    i * CELULA_TAMANHO_PIXELS, // y1
                    PAINEL_TAMANHO_PIXELS, // x2
                    i * CELULA_TAMANHO_PIXELS // y2
            );
        }
    }

    public TabuleiroPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 631, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 385, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
